/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package voicerecognitionapp;

import com.assemblyai.api.RealtimeTranscriber;
import javax.sound.sampled.*;
import java.io.IOException;
import static java.lang.Thread.interrupted;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }    

    public static void main(String[] args) throws IOException {
        System.out.println(new App().getGreeting());
        
        Thread thread = new Thread(() -> {
            try {
                RealtimeTranscriber realTimeTranscriber = RealtimeTranscriber.builder()
                        .apiKey("222ada7840e040708158032c11ef8731")
                        .sampleRate(16_000)
                        .onSessionBegins(sessionBegins -> System.out.println(
                            "Session open ID: " + sessionBegins.getSessionId()))
                            
                        .onPartialTranscript(transcript -> {
                            if(!transcript.getText().isEmpty())
                                System.out.println("Partial: " + transcript.getText());
                        })
                        
                        /*
                        .disablePartialTranscripts()
                        .endUtteranceSilenceThreshold(1000)
                        */
                        .onFinalTranscript(transcript -> System.out.println("Final: " + transcript.getText()))    
                        .onError(err -> System.out.println("Error: " + err.getMessage()))
                        .build();

                System.out.println("Connecting to AssemblyAI");
                realTimeTranscriber.connect();

                System.out.print("Start recording");
                AudioFormat format = new AudioFormat(16_000, 16, 1, true, false);
                TargetDataLine line = AudioSystem.getTargetDataLine(format);
                line.open(format);
                byte[] data = new byte[line.getBufferSize()];
                line.start();

                while (!interrupted()) {
                    line.read(data, 0, data.length);
                    realTimeTranscriber.sendAudio(data);
                } // while

                System.out.println("Recording has stopped");
                line.close();

                System.out.println("Closing transcript connection");
                realTimeTranscriber.close();
            } catch (LineUnavailableException lue) {
                throw new RuntimeException(lue);
            } // try
        });
        thread.start();

        System.out.println("Press ENTER key to stop...");
        System.in.read();
        thread.interrupt();
        System.exit(0);
    } // main
} // app
